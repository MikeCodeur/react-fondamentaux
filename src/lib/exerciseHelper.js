"use client"
//DO NOT EDIT THIS FILE !!!!!

let isDomReady = false
const initQueue = []
const displayTextQueue = []

import { IFRAME_ELEMENT_ID } from "@/common/constants"

//init est appellé uniquement quand le dom est ready
export const init = (label, type) => {
  if (isDomReady) {
    runInit({ label, type })
  } else {
    initQueue.push({ label, type })
  }
}
//displayText est appellé uniquement quand le dom est ready
export const displayText = (label = "Exercice", type = "exo") => {
  if (isDomReady) {
    runDisplayText({ label, type })
  } else {
    displayTextQueue.push({ label, type })
  }
}
// a appeler que quand le dom ready
const getIframeDocument = () => {
  const iframe = document.getElementById(IFRAME_ELEMENT_ID)
  const iframeDocument = iframe.contentDocument || iframe.contentWindow.document
  return iframeDocument
}
const runInit = ({ label, type }) => {
  const ID = getDivExoId(type)
  const iframeDocument = getIframeDocument()

  const root = iframeDocument.getElementById("root")

  if (!root) {
    console.warn("Element with id 'root' not found.")
    return
  }

  const el = iframeDocument.getElementById(ID)
  if (el && el.parentNode) {
    el.parentNode.removeChild(el)
  }

  const exoDiv = iframeDocument.createElement("div")
  const h2 = iframeDocument.createElement("h2")
  h2.innerText = label

  exoDiv.setAttribute("id", ID)
  exoDiv.appendChild(h2)
  root.appendChild(exoDiv)
}

const onDomReady = () => {
  console.log("DOM is ready")
  isDomReady = true
  initQueue.forEach(runInit)
  initQueue.length = 0 // Clear the queue after processing

  displayTextQueue.forEach(runDisplayText)
  displayTextQueue.length = 0 // Clear the queue after processing
}

const waitRootDomReady = async () => {
  let iframe = null
  let iframeDocument = null
  const waittime = 50
  let loop = 0
  let maxloop = 200
  // Attends jusqu'à ce que l'iframe ne soit plus null
  while (!iframe) {
    iframe = document.getElementById(IFRAME_ELEMENT_ID)
    if (!iframe) {
      console.log("Waiting for iframe to be available...")
      await new Promise((resolve) => setTimeout(resolve, waittime))
    }
    loop++
    if (loop > maxloop) {
      console.error("IFrame not found")
      return
    }
  }

  // Attends jusqu'à ce que le document de l'iframe soit prêt
  while (!iframe.contentDocument && !iframe.contentWindow.document) {
    console.log("Waiting for iframe document to be available...")
    await new Promise((resolve) => setTimeout(resolve, waittime))
    loop++
    if (loop > maxloop) {
      console.error("IFrame not found")
      return
    }
  }

  iframeDocument = iframe.contentDocument || iframe.contentWindow.document

  // Attends jusqu'à ce que l'élément "root" soit présent dans l'iframe
  while (!iframeDocument.getElementById("root")) {
    console.log("Waiting for iframe 'root' to be ready...")
    await new Promise((resolve) => setTimeout(resolve, waittime))
    loop++
    if (loop > maxloop) {
      console.error("IFrame not found")
      return
    }
  }

  onDomReady()
}

// waitRootDomReady()

const getDivExoId = (type) => {
  let divExoId = type === "exo" ? "exo" : "exo_final" //etc ...
  return divExoId
}

const runDisplayText = ({ label, type }) => {
  const ID = getDivExoId(type)
  const iframeDocument = getIframeDocument()

  const exoDiv = iframeDocument.getElementById(ID) // "exo" : "exo_final" doit etre dans IFrame
  const p = iframeDocument.createElement("p")
  p.innerText = label
  exoDiv.appendChild(p)
}

export default displayText

//CODE A UTILISER DANS LES VRAI HELPER

// "use client"
// //DO NOT EDIT THIS FILE !!!!!

// import {
//   init as defaultInit,
//   displayText as defaultDisplayText,
// } from "../../lib/exerciseHelper"

// const exoType = "exo" // || "exo_final" || "exo_bonus_1"
// const init = (label = "Exercice") => {
//   defaultInit(label, exoType)
// }

// const displayText = (label = "Exercice") => {
//   defaultDisplayText(label, exoType)
// }

// export { init, displayText, displayText as default }
